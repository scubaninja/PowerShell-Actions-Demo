name: Test PowerShell on Ubuntu
on: 
    push:
        branches: [ main ]
    pull_request:
        # The branches below must be a subset of the branches above
        branches: [ main ]

jobs:
  pester-test:
    name: Pester test
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Perform a Pester test from the command-line
        shell: pwsh
        run: Test-Path resultsfile.log | Should -Be $true
      - name: Perform a Pester test from the Tests.ps1 file
        shell: pwsh
        run: |
          Invoke-Pester Unit.Tests.ps1 -Passthru

jobs:
  install-dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install from PSGallery
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module SqlServer, PSScriptAnalyzer

  cache output: 
    name: Cache output of test
    steps:
      - uses: actions/checkout@v3
      - name: Setup PowerShell module cache
        id: cacher
        uses: actions/cache@v3
        with:
            path: "~/.local/share/powershell/Modules"
            key: ${{ runner.os }}-SqlServer-PSScriptAnalyzer
      - name: Install required PowerShell modules
        if: steps.cacher.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module SqlServer, PSScriptAnalyzer -ErrorAction Stop

  PSScriptAnalyzer Linting:
    name: Install PSAnalyzer Modules
    runs-on: ubuntu-latest
    steps: 
        - uses: actions/checkout@v3
        - name: Install PSScriptAnalyzer module
          shell: pwsh
          run: |
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            Install-Module PSScriptAnalyzer -ErrorAction Stop
        - name: Lint with PSScriptAnalyzer
          shell: pwsh
          run: |
            Invoke-ScriptAnalyzer -Path *.ps1 -Recurse -Outvariable issues
            $errors   = $issues.Where({$_.Severity -eq 'Error'})
            $warnings = $issues.Where({$_.Severity -eq 'Warning'})
             if ($errors) {
              Write-Error "There were $($errors.Count) errors and $($warnings.Count) warnings total." -ErrorAction Stop
            } else {
              Write-Output "There were $($errors.Count) errors and $($warnings.Count) warnings total."
            }

jobs:
  upload-pester-results:
    name: Run Pester and upload results
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Test with Pester
        shell: pwsh
        run: Invoke-Pester Unit.Tests.ps1 -Passthru | Export-CliXml -Path Unit.Tests.xml
      - name: Upload test results
        uses: actions/upload-artifact@v3
        with:
          name: ubuntu-Unit-Tests
          path: Unit.Tests.xml
    if: ${{ always() }}